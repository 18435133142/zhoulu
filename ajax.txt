一、简介
	AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。
	AJAX 不是新的编程语言，而是一种使用现有标准的新方法。
	AJAX 是与服务器交换数据并更新部分网页的艺术，在不重新加载整个页面的情况下。
	AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。
	AJAX 是一种用于创建快速动态网页的技术。
	传统的网页（不使用 AJAX）如果需要更新内容，必需重载整个网页面。
	有很多使用 AJAX 的应用程序案例：新浪微博、Google 地图、开心网等等。
	
	创建对象：XMLHttpRequest 是 AJAX 的基础。
	所有现代浏览器均支持 XMLHttpRequest 对象（IE5 和 IE6 使用 ActiveXObject）。
	XMLHttpRequest 用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。
	所有现代浏览器（IE7+、Firefox、Chrome、Safari 以及 Opera）均内建 XMLHttpRequest 对象: variable=new XMLHttpRequest();
	老版本的 Internet Explorer （IE5 和 IE6）使用 ActiveX 对象：variable=new ActiveXObject("Microsoft.XMLHTTP");
	为了兼容老版本的浏览器写法：var xmlhttp;
								if (window.XMLHttpRequest)
								  {// code for IE7+, Firefox, Chrome, Opera, Safari
									xmlhttp=new XMLHttpRequest();
								  }
								else
								  {// code for IE6, IE5
									xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
								  }
	发送请求：如需将请求发送到服务器，我们使用 XMLHttpRequest 对象的 open() 和 send() 方法：
	XMLHttpRequest 对象如果要用于 AJAX 的话，其 open() 方法的 async 参数必须设置为 true
		xmlhttp.open("GET", "test1.txt", true);
		xmlhttp.send();
		可以使用xmlhttp.setRequestHeader("Content-type","application/x-www-form-urlencoded");设置请求头信息
		当使用 async=true 时，请规定在响应处于 onreadystatechange 事件中的就绪状态时执行的函数：
	get与post比较：
		与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。
		然而，在以下情况中，请使用 POST 请求：
			无法使用缓存文件（更新服务器上的文件或数据库）
			向服务器发送大量数据（POST 没有数据量限制）
			发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠
	
	响应：如需获得来自服务器的响应，请使用 XMLHttpRequest 对象的 responseText 或 responseXML 属性。
		responseText：获得字符串形式的响应数据。
			document.getElementById("myDiv").innerHTML=xmlhttp.responseText;
		responseXML：获得 XML 形式的响应数据。
			xmlDoc=xmlhttp.responseXML;
			txt="";
			x=xmlDoc.getElementsByTagName("ARTIST");
			for (i=0;i<x.length;i++)
			  {
			  txt=txt + x[i].childNodes[0].nodeValue + "<br />";
			  }
			document.getElementById("myDiv").innerHTML=txt;
			
	响应事件：onreadystatechange 事件
		当请求被发送到服务器时，我们需要执行一些基于响应的任务。
		每当 readyState 改变时，就会触发 onreadystatechange 事件。
		readyState 属性存有 XMLHttpRequest 的状态信息。
		
		onreadystatechange：存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。
							在 onreadystatechange 事件中，我们规定当服务器响应已做好被处理的准备时所执行的任务。
							当 readyState 等于 4 且状态为 200 时，表示响应已就绪：
		readyState：存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。
					0: 请求未初始化
					1: 服务器连接已建立
					2: 请求已接收
					3: 请求处理中
					4: 请求已完成，且响应已就绪
		status：200: "OK"
				404: 未找到页面
				xmlhttp.onreadystatechange=function()
				  {
				  if (xmlhttp.readyState==4 && xmlhttp.status==200)
					{
					document.getElementById("myDiv").innerHTML=xmlhttp.responseText;
					}
				  }
	Callback 函数：callback 函数是一种以参数形式传递给另一个函数的函数。
				   如果您的网站上存在多个 AJAX 任务，那么您应该为创建 XMLHttpRequest 对象编写一个标准的函数，并为每个 AJAX 任务调用该函数。
				   该函数调用应该包含 URL 以及发生 onreadystatechange 事件时执行的任务（每次调用可能不尽相同）：
				   function myFunction()
					{
					  loadXMLDoc("ajax_info.txt",function()
					  {
					  if (xmlhttp.readyState==4 && xmlhttp.status==200)
						{
						document.getElementById("myDiv").innerHTML=xmlhttp.responseText;
						}
					  });
					}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	