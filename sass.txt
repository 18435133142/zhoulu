Sass 是一种 CSS 的预编译语言。它提供了 变量（variables）、嵌套（nested rules）、 混合（mixins）、 函数（functions）等功能，
并且完全兼容 CSS 语法。Sass 能够帮助复杂的样式表更有条理， 并且易于在项目内部或跨项目共享设计。
保持sass条理性和可读性的最基本的三个方法：嵌套、导入和注释

变量：变量是存储信息并在将来重复利用的一种方式，在整个样式表中都可访问。 你可以在变量中存储颜色、字体 或任何 CSS 值，
	并在将来重复利用。Sass 使用 $ 符号 作为变量的标志。
	$font-stack:    Helvetica, sans-serif;
	$primary-color: #333;

	body {
	  font: 100% $font-stack;
	  color: $primary-color;
	}
	
嵌套：在编写 HTML 时，您可能已经注意到它有一个清晰的嵌套和可视化层次结构。 而 CSS 则没有。
	Sass 允许您嵌套 CSS 选择器，嵌套方式 与 HTML 的视觉层次结构相同。请注意，过度嵌套的规则 将导致过度限定的 CSS，
	这些 CSS 可能很难维护，并且 通常被认为是不好的做法。使用&表示父级。
	nav {
	  ul {
		margin: 0;
		padding: 0;
		list-style: none;
	  }

	  li { display: inline-block; }

	  a {
		display: block;
		padding: 6px 12px;
		text-decoration: none;
	  }
	}
	嵌套属性：
	nav {
	  border: {
		  style: solid;
		  width: 1px;
		  color: #ccc;
	  }
	}
	nav {
	  border: 1px solid #ccc {
		  left: 0px;
		  right: 0px;
	  }
	}
	子组合选择器和同层组合选择器：>、+和~;
	article {
	  ~ article { border-top: 1px dashed #ccc }
	  > section { background: #eee }
	  dl > {
		dt { color: #333 }
		dd { color: #555 }
	  }
	  nav + & { margin-top: 0 }
	}
	编译为：
	article ~ article { border-top: 1px dashed #ccc }
	article > footer { background: #eee }
	article dl > dt { color: #333 }
	article dl > dd { color: #555 }
	nav + article { margin-top: 0 }
	
混合（Minixs）: 动态申明需要混入的样式(@mixin name(param) { .... }) 然后在需要的地方混入。(@include name)
	@mixin transform($property) {
	  -webkit-transform: $property;
	  -ms-transform: $property;
	  transform: $property;
	}
	.box { @include transform(rotate(30deg)); }
	
导入SASS文件：css有一个特别不常用的特性，即@import规则，它允许在一个css文件中导入其他css文件。然而，
	后果是只有执行到@import时，浏览器才会去下载其他css文件，这导致页面加载起来特别慢。
	sass也有一个@import规则，但不同的是，sass的@import规则在生成css文件时就把相关文件导入进来。这意味着所有相关的样式被归
	纳到了同一个css文件中，而无需发起额外的下载请求。另外，所有在被导入文件中定义的变量和混合器（参见2.5节）均可在导入文件中使用。
	使用sass的@import规则并不需要指明被导入文件的全名。你可以省略.sass或.scss文件后缀
	当通过@import把sass样式分散到多个文件时，你通常只想生成少数几个css文件。那些专门为@import命令而编写的sass文件，并不需要生成对
	应的独立css文件，这样的sass文件称为局部文件。对此，sass有一个特殊的约定来命名这些文件。此约定即，sass局部文件的文件名以下划线开头。
	这样，sass就不会在编译时单独编译这个文件输出css，而只把这个文件用作导入。当你@import一个局部文件时，还可以不写文件的全名，即省略文
	件名开头的下划线。举例来说，你想导入themes/_night-sky.scss这个局部文件里的变量，你只需在样式表中写@import "themes/night-sky";。
	局部文件可以被多个不同的文件引用。当一些样式需要在多个页面甚至多个项目中使用时，这非常有用。在这种情况下，有时需要在你的样式表中对导入
	的样式稍作修改，sass有一个功能刚好可以解决这个问题，即默认变量值（$fancybox-width: 400px !default;）。
	
	嵌套导入：跟原生的css不同，sass允许@import命令写在css规则内。这种导入方式下，生成对应的css文件时，局部文件会被直接插入到css规则内导入
		它的地方。举例说明，有一个名为_blue-theme.scss的局部文件，内容如下：aside {
																			  background: blue;
																			  color: white;
																			}
		然后把它导入到一个CSS规则内，如下所示：	.blue-theme {@import "blue-theme"}

												//生成的结果跟你直接在.blue-theme选择器内写_blue-theme.scss文件的内容完全一样。

												.blue-theme {
												  aside {
													background: blue;
													color: #fff;
												  }
												}
		被导入的局部文件中定义的所有变量和混合器，也会在这个规则范围内生效。这些变量和混合器不会全局有效，这样我们就可以通过嵌套导入只对
		站点中某一特定区域运用某种颜色主题或其他通过变量配置的样式。
		
	原生的CSS导入;由于sass兼容原生的css，所以它也支持原生的CSS@import。尽管通常在sass中使用@import时，sass会尝试找到对应的sass文件并导入进来，
		但在下列三种情况下会生成原生的CSS@import，尽管这会造成浏览器解析css时的额外下载：
		被导入文件的名字以.css结尾；
		被导入文件的名字是一个URL地址（比如http://www.sass.hk/css/css.css），由此可用谷歌字体API提供的相应服务；
		被导入文件的名字是CSS的url()值。
	这就是说，你不能用sass的@import直接导入一个原始的css文件，因为sass会认为你想用css原生的@import。但是，因为sass的语法完全兼容css，
	所以你可以把原始的css文件改名为.scss后缀，即可直接导入了。
	
静默注释：文件导入是保证sass的代码可维护性和可读性的重要一环。次之但亦非常重要的就是注释了。注释可以帮助样式作者记录写sass的过程中的想法。
	在原生的css中，注释对于其他人是直接可见的，但sass提供了一种方式可在生成的css文件中按需抹掉相应的注释。
	css中注释的作用包括帮助你组织样式、以后你看自己的代码时明白为什么这样写，以及简单的样式说明。但是，你并不希望每个浏览网站源码的人都能看到所有注释。
	sass另外提供了一种不同于css标准注释格式/* ... */的注释语法，即静默注释，其内容不会出现在生成的css文件中。静默注释的语法跟JavaScriptJava等类C
	的语言中单行注释的语法相同，它们以//开头，注释内容直到行末。
	body {
	  color: #333; // 这种注释内容不会出现在生成的css文件中
	  padding: 0; /* 这种注释内容会出现在生成的css文件中 */
	}
	
用选择器继承来精简CSS:使用sass的时候，最后一个减少重复的主要特性就是选择器继承。基于Nicole Sullivan面向对象的css的理念，
	选择器继承是说一个选择器可以继承为另一个选择器定义的所有样式。这个通过@extend语法实现，
	//通过选择器继承继承样式
	.error {
	  border: 1px solid red;
	  background-color: #fdd;
	}
	.seriousError {
	  @extend .error;
	  border-width: 3px;
	}
	.seriousError不仅会继承.error自身的所有样式，任何跟.error有关的组合选择器样式也会被.seriousError以组合选择器的形式继承，如下代码:
	//.seriousError从.error继承样式
	.error a{  //应用到.seriousError a
	  color: red;
	  font-weight: 100;
	}
	h1.error { //应用到hl.seriousError
	  font-size: 1.2rem;
	}






































	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	