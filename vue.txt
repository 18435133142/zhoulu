计算属性：计算属性是基于它的依赖缓存。计算属性只有在它的相关依赖发生改变时才会重新取值。
	1、在一个计算属性里可以完成各种复杂的逻辑，包括运算、函数调用等，只要最终返回一个结果就可以。
	除了上例简单的用法，计算属性还可以依赖多个 Vue 实例的数据，只要其中任一数据变化，计算属性就会重新执行，视图也会更新。
	2、getter 和 setter 方法  计算属性默认只有 getter ，不过在需要时你也可以提供一个 setter 
	   每一个计算属性都包含一个 getter 方法和一个 setter 方法。
	3、如果计算属性后面直接跟一个 function，使用的就是计算属性的默认方法 getter 来读取。
	4、我们也可以在需要时使用 setter 函数 ， 当手动修改计算属性的值就像修改一个普通数据那样时，就会触发 setter 函数，执行一些自定义的操作。

计算属性与$watch比较：Vue.js 提供了一个方法 $watch ，它用于观察 Vue 实例上的数据变动。当一些数据需要根据其它数据变化时， $watch 
	很诱人 —— 特别是如果你来自 AngularJS 。不过，通常更好的办法是使用计算属性而不是一个命令式的 $watch 回调。
	但是使用$watch有时候会重复很多代码，这时就需要使用计算属性。但是具体使用计算属性还是$watch还得看实际情况：
	例：
	使用$watch
	data: {
	  firstName: 'Foo',
	  lastName: 'Bar',
	  fullName: 'Foo Bar'
    },
    watch: {
	  firstName: function (val) {
	    this.fullName = val + ' ' + this.lastName
	  },
	  lastName: function (val) {
	    this.fullName = this.firstName + ' ' + val
	  }
    }
	使用计算属性：
	data: {
		firstName: 'Foo',
		lastName: 'Bar'
	  },
	  computed: {
		fullName: function () {
		  return this.firstName + ' ' + this.lastName
		}
	  }
	  
深入响应式原理：Vue 最显著的特性之一便是不太引人注意的响应式系统(reactivity system)。模型层(model)只是普通 JavaScript 对象，
	修改它则更新视图(view)。这会让状态管理变得非常简单且直观，
	把一个普通 Javascript 对象传给 Vue 实例的 data 选项，Vue 将遍历此对象所有的属性，并使用 Object.defineProperty 把这些属性全部转为 
	getter/setter。Object.defineProperty 是仅 ES5 支持，且无法 shim 的特性，这也就是为什么 Vue 不支持 IE8 以及更低版本浏览器的原因。
	getter/setter 对于用户来说是不可见的，但是基于此内部机制，可以使 Vue 在属性被访问和修改时去触发相应的 getter 和 setter，
	以实现依赖追踪(dependency-track)和变更通知(change-notification)。
	
	变化检测问题：受现代 Javascript 的限制（以及废弃 Object.observe），Vue 不能检测到对象属性的添加或删除。由于 Vue 会在初始化实例时对属性执行
	getter/setter 转化过程，所以属性必须在 data 对象上存在才能让 Vue 转换它，这样才能让它是响应的。Vue 不允许在已经创建的实例上动态添加新的根级
	响应式属性(root-level reactive property)。然而它可以使用 Vue.set(object, key, value) 方法将响应属性添加到嵌套的对象上：也可以使用this.$set(this.someObject,'b',2)
	进行设置，这也是全局 Vue.set 方法的别名。
	
	声明响应式属性：由于 Vue 不允许动态添加根级响应式属性，所以你必须在初始化实例前声明根级响应式属性，哪怕只是一个空值:
	data: {
		// 声明 message 为一个空值字符串
		message: ''
	  },
	如果你在 data 选项中未声明 message，Vue 将警告你渲染函数在试图访问的属性不存在。
	这样的限制在背后是有其技术原因的，它消除了在依赖项跟踪系统中的一类边界情况，也使 Vue 实例在类型检查系统的帮助下运行的更高效。
	而且在代码可维护性方面也有一点重要的考虑：data 对象就像组件状态的概要，提前声明所有的响应式属性，可以让组件代码在以后重新阅读或
	其他开发人员阅读时更易于被理解。
	
	异步更新队列：Vue 异步执行 DOM 更新。只要观察到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。如果同一个 watcher 被多次触发，
	只会一次推入到队列中。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作上非常重要。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际（已去重的）
	工作。Vue 在内部尝试对异步队列使用原生的 Promise.then 和 MutationObserver，如果执行环境不支持，会采用 setTimeout(fn, 0) 代替。
	例如，当你设置 vm.someData = 'new value' ，该组件不会立即重新渲染。当刷新队列时，组件会在事件循环队列清空时的下一个“tick”更新。多数情况我们不需要关心这个过程，
	但是如果你想在 DOM 状态更新后做点什么，这就可能会有些棘手。虽然 Vue.js 通常鼓励开发人员沿着“数据驱动”的方式思考，避免直接接触 DOM，但是有时我们确实要这么做。
	为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 Vue.nextTick(callback) 。这样回调函数在 DOM 更新完成后就会调用。

组件：组件（Component）是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素， 
	Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 HTML 元素的形式，以 is 特性扩展。
	全局注册组件：
		// 注册
		Vue.component('my-component', {
		  template: '<div>A custom component!</div>'
		})
	局部注册组件：
		var Child = {
		  template: '<div>A custom component!</div>'
		}
		new Vue({
		  // ...
		  components: {
			// <my-component> 将只在父模板可用
			'my-component': Child
		  }
		})
		
	data 必须是函数：
		使用组件时，大多数选项可以被传入到 Vue 构造器中，有一个例外： data 必须是函数。

Render函数：Vue 推荐使用在绝大多数情况下使用 template 来创建你的 HTML。然而在一些场景中，你真的需要 JavaScript 的完全编程的能力，
	这就是 render 函数，它比 template 更接近编译器。





















































